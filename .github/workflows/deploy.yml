name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  NODE_VERSION: "24"

  SERVICE_ACCOUNT: ${{ vars.SERVICE_ACCOUNT }}
  SHORT_SHA: ${{ github.sha }}

  GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  GCP_REGION: ${{ vars.GCP_REGION }}
  WIF_PROVIDER: ${{ vars.WIF_PROVIDER }}

  ARTIFACT_REGISTRY: ${{ vars.GCP_REGION }}-docker.pkg.dev
  ARTIFACT_REPOSITORY: ${{ vars.ARTIFACT_REPOSITORY }}
  DOCKER_IMAGE: noita-backend

  CLOUDSQL_INSTANCE: ${{ secrets.CLOUDSQL_INSTANCE }}
  BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
  CLOUD_RUN_SERVICE_NAME: noita-backend
  CLOUD_RUN_SERVICE_ACCOUNT: ${{ vars.CLOUD_RUN_SERVICE_ACCOUNT }}
  CLOUD_SQL_PROXY_IMAGE: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.16.0

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # ratchet:actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # ratchet:actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm test

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      id-token: write

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # ratchet:actions/checkout@v4

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@6fc4af4b145ae7821d527454aa9bd537d1f2dc5f # ratchet:google-github-actions/auth@v2
        with:
          token_format: access_token
          workload_identity_provider: ${{ env.WIF_PROVIDER }}
          service_account: ${{ env.SERVICE_ACCOUNT }}
          audience: "https://github.com/noitach"

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Login to Google Artifact Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # ratchet:docker/login-action@v3
        with:
          registry: ${{ env.ARTIFACT_REGISTRY }}
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # ratchet:docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # ratchet:docker/metadata-action@v5
        with:
          images: ${{ env.ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REPOSITORY }}/${{ env.DOCKER_IMAGE }}
          tags: |
            type=sha
            type=raw,value=latest

      - name: Extract SHA tag only
        id: extract-tag
        run: |
          echo "sha_tag=$(echo "${{ steps.meta.outputs.tags }}" | tr ',' '\n' | grep sha-)" >> "$GITHUB_OUTPUT"

      - name: Build and push Docker image
        uses: docker/build-push-action@ca052bb54ab0790a636c9b5f226502c73d547a25 # ratchet:docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to Cloud Run
        id: deploy
        run: |
          URL=$(gcloud run deploy ${{ env.CLOUD_RUN_SERVICE_NAME }} \
            --region ${{ env.GCP_REGION }} \
            --platform managed \
            --service-account ${{ env.CLOUD_RUN_SERVICE_ACCOUNT }} \
            --allow-unauthenticated \
            --execution-environment=gen2 \
            --cpu-boost \
            --max-instances=1 \
            --ingress=all \
            --add-volume=name=images,type=cloud-storage,bucket=${{ env.BUCKET_NAME }} \
            --container=cloud-sql-proxy \
            --image=${{ env.CLOUD_SQL_PROXY_IMAGE }} \
            --cpu=1 \
            --memory=128Mi \
            --args=--address=0.0.0.0,--port=5432,--structured-logs,${{ env.CLOUDSQL_INSTANCE }} \
            --startup-probe=timeoutSeconds=1,periodSeconds=10,failureThreshold=3,tcpSocket.port=5432 \
            --container=app \
            --image=${{ steps.extract-tag.outputs.sha_tag }} \
            --set-env-vars=DB_SSL=false,DB_HOST=127.0.0.1,SERVER_PORT=8080 \
            --set-secrets=DB_PASS=DB_PASS:latest,DB_USER=DB_USER:latest,DB_NAME=DB_NAME:latest \
            --cpu=1 \
            --memory=512Mi \
            --port=8080 \
            --add-volume-mount=volume=images,mount-path=/app/public/images \
            --startup-probe=initialDelaySeconds=10,periodSeconds=10,failureThreshold=3,tcpSocket.port=8080 \
            --depends-on=cloud-sql-proxy)
          echo "URL: $URL"
          echo "url=$URL" >> $GITHUB_OUTPUT

      - name: Show deployment URL
        run: echo "Deployed to ${{ steps.deploy.outputs.url }}"

      - name: Test deployment
        run: curl -f ${{ steps.deploy.outputs.url }}/health
